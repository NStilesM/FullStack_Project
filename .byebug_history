quit
User.where(email: identifier).or(User.where(username: identifier)).first
identifier = "random"
User.where(email: identifier).or(User.where(username: identifier)).first
User.where(email: identifier).or(User.where(username: identifier)).nil?
User.where(email: identifier).or(User.where(username: identifier)).nil
User.where(email: identifier).or(User.where(username: identifier))
identifier = "tester"
User.where(email: identifier).or(User.where(username: identifier))
User.find_by_username_or_email("tester")
login_params[:identifier]
@user
quit
q
login(@user)
c
@user
@user.nil?
c
quit
@user.password=("password")
@user
quit
@user
user
@user.is_password?("password")
login_params[:password].is_password?
login_params[:password]
login_params
@user
c
@user.is_password?("password")
@user.is_password?(password)
user.is_password?(password)
@user.is_password?("password")
login_params[:password]
login_params
@user
quit
User.where(username: identifier).first
User.where(username: identifier)
quit
next
User.where(email: "tester")
email: "tester"
identifier
quit
c
@question.kind
c
@question.kind
c
@question.save
c
@question.save
c
@question
c
s
@question
c
current_user
@user
c
current_user.questions
question_params
params
id: params[:id]
params[:id]
@question = current_user.questions.find_by(id: params[:id])
@question = current_user.questions.find_by(:7 params[:7])
@question = current_user.questions.find_by(7 params[7])
id
@question = current_user.questions.find_by(id: params[:id])
id
current_user.questions
current_user
c
@question
c
a = questions.find_by(id: params[:id])
(id: params[:id])
question_params
params
params[:id]
quit
quot
c
question_params
questions
group
current_user
c
quit
@question
c
quit
response.body
response
c
quit
@groups[0].question.all
@groups[0].questions.all
@groups[0].questions
@groups[0]
@groups
quit
response.status
response.body
response
c
quit
@question
quit
y
quit
response.status
response.statuscode
response.body
c
quit
response.body
quit
user.errors.messages == nil
user.errors.messages == {}
users.errors.messages == {}
user.errors.messages
quit
user
user.errors
c
quit
user.errors
c
quit
:user
user
c
quit
@question
Question.exists?(title: title)
Question
quit
c
identifier
c
quit
@question
c
s
test_question
quit
c
s
question
quit
response.body
response
quit
login_params
current_user
@user
c
n
identifier
c
s
quit
login_params
session_params
session.params
params
:identifier
user
quit
current_user
@user
c
quit
current_user
@user
c
s
quit
quot
session[:session_token]
unless session[:session_token]
session[:session_token]
session[:session_token
session
quit
User.find_by(session_token: session[:session_token])
qUser.find_by(session_token: session[:session_token])
quit
current_user
quit
params
@user
current_user
quit
@user
quit
current_user
@user
params
quit
params[:user]
params
quit
qiot
params[:user]
params
@user
User.find_by(session_token: session[:session_token])
session[:session_token]
session
quit
current_user
quit
params
@user
current_user
quit
@user
quit
current_user
@user
params
quit
params[:user]
params
quit
qiot
params[:user]
params
@user
